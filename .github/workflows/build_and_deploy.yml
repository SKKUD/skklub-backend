# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle & Docker Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest
      
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
            ${{ runner.os }}-gradle-
            
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash
      
    - name: Create application.yml
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.PROPERTIES }}" > ./application.yml
      shell: bash
    
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          **/build/test-results/test/TEST-*.xml

    - name: Docker build & push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_REPO }}

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          touch ./docker-compose.yml
          echo "${{ secrets.DOCKER_COMPOSE }}" > ./docker-compose.yml
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker compose up -d
          sudo docker image prune -f
          
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Overwrite Api Document in S3
      run: |
        mkdir -p ./src/main/resources/static/docs
        touch ./src/main/resources/static/docs/index.html
        aws s3 cp ./index.html ${{ secrets.AWS_S3_API_DOCS }} --acl public-read
